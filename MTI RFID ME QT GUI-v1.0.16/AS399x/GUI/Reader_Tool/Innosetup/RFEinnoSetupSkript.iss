; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

;#define APPID "476B3598-2561-4EE9-B3BE-F7413DC118DF" before v1.0.14
#define APPID "E78417E6-7B39-4E73-B58E-CA1D9AB79ED4"
#define UNINSTKEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\{" + APPID + "}_is1"
#define APPNAME "MTI RFID ME"
#define APPPATH "MTI"

#define MAJOR "v1.0.16"

#define APPVER Str(MAJOR)

#define DEVICENAME 	"MTI RFID ME"
#define EXECUTABLE	"MTI RFID ME"

#define ICON		"mtiRfidLogo.ico"

#define APPENDDOCUMENT "MTI RFID ME User Manual v1.4"
#define PDFICON    "pdf_icon.ico"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{{#APPID}}
AppName={#APPNAME}
AppVerName={#APPNAME} {#APPVER}
AppVersion={#APPVER}
AppPublisher=Microelectronic Technology Inc.
AppPublisherURL=http://www.mti.com/
AppSupportURL=http://www.mti.com/
AppUpdatesURL=http://www.mti.com/
DefaultDirName={pf}\\MTI\{#APPNAME} {#APPVER}
DefaultGroupName={#APPPATH}\{#APPNAME} {#APPVER}
UninstallDisplayIcon=.\icons\classic-uninstall.ico

SetupIconFile=.\icons\{#ICON}

WizardImageFile=.\icons\mtiRfidLogo.bmp

WizardSmallImageFile=.\icons\mtiSmallRfidLogo.bmp

AllowNoIcons=yes
OutputBaseFilename={#APPNAME} Setup {#MAJOR}
Compression=lzma
SolidCompression=true
PrivilegesRequired=poweruser
OutputDir=.\output

[Languages]
Name: en; MessagesFile: compiler:Default.isl; LicenseFile: .\License-EN.txt

[CustomMessages]
en.InfoUnins=Remove Application?

en.InfoUninsText=The Application already exist

en.InfoUninsQue={#APPNAME} already exist in version %1.%2. How do you want to continue?

en.InfoUninsOption1=Remove program

en.InfoUninsOption2=Program maintained and leave setup

[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked
Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked

[Files]
Source: License-EN.txt; DestDir: {app}\license; Languages: en

Source: icons\*.ico; DestDir: {app}\Icons; Flags: ignoreversion

Source: ..\build\release\{#EXECUTABLE}.exe; DestDir: {app}; Flags: ignoreversion; Tasks: ; Languages: 

Source: ..\build\release\{#APPENDDOCUMENT}.pdf; DestDir: {app}; Flags: ignoreversion; Tasks: ; Languages: 

Source: depends\*.*; DestDir: {app}; Flags: recursesubdirs ignoreversion

[Icons]
//Verknüpfung im Startmen?: 
Name: {group}\{#APPNAME}  {#APPVER}; Filename: {app}\{#EXECUTABLE}.exe; WorkingDir: {app}; IconFilename: {app}\Icons\{#ICON}
Name: {group}\{#APPENDDOCUMENT}; Filename: {app}\{#APPENDDOCUMENT}.pdf; WorkingDir: {app}; IconFilename: {app}\Icons\{#PDFICON}
Name: {group}\{cm:UninstallProgram,{#APPNAME}}; Filename: {uninstallexe}; IconFilename: {app}\Icons\classic-uninstall.ico
//Desktop Verknüfung: 
Name: {commondesktop}\{#APPNAME}; Filename: {app}\{#EXECUTABLE}.exe; WorkingDir: {app}; IconFilename: {app}\Icons\{#ICON}; Tasks: desktopicon
//Schnellstart Verknüpfung: 
Name: {userappdata}\Microsoft\Internet Explorer\Quick Launch\{#APPNAME}; Filename: {app}\{#EXECUTABLE}.exe; WorkingDir: {app}; IconFilename: {app}\Icons\{#ICON}; Tasks: quicklaunchicon

[Run]
;Filename: "{app}\Programm-EXE"; Description: {cm:LaunchProgram,{#APPNAME}}; Flags: nowait postinstall skipifsilent

[UninstallDelete]
Type: filesandordirs; Name: {app}

[Registry]
;Root: HKLM; Subkey: "Software\Ihre Firma"; Flags: uninsdeletekeyifempty
;Root: HKLM; Subkey: "Software\Ihre Firma\Ihre Anwendung"; Flags: uninsdeletekey;
;Root: HKLM; Subkey: "Software\Ihre Firma\Ihre Anwendung"; ValueName: "Path"; ValueData: "{app}"; ValueType: string

[Code]
//Globale Variablen
var
  DExplorePage: TInputOptionWizardPage;
  s_unistallPath: string;
  i_pageId: integer;

//Prüft ob Unistaller.exe schon vorhanden ist.
function DoesUnistallerExist: boolean;
begin
// den Wert aus der Registry holen, ...
Result := (RegQueryStringValue(HKLM,'{#UNINSTKEY}','InstallLocation',s_unistallPath)) and (FileExists(s_unistallPath + 'unins000.exe'));
end;


//Bietet die Optionsseite an, wenn das Programm bereits installiert ist.
procedure InitializeWizard;
var
 c_majorV: cardinal;
 c_minorV: cardinal;
begin
    if DoesUnistallerExist() then
		begin
		RegQueryDWordValue(HKLM,'{#UNINSTKEY}','MajorVersion', c_majorV);
		RegQueryDWordValue(HKLM,'{#UNINSTKEY}','MinorVersion', c_minorV);
		DExplorePage := CreateInputOptionPage(wpWelcome,CustomMessage('InfoUnins'),CustomMessage('InfoUninsText'),FmtMessage(CustomMessage('InfoUninsQue'), [IntToStr(c_majorV),IntToStr(c_minorV)]), true, false);
		DExplorePage.Add(CustomMessage('InfoUninsOption1'));
		DExplorePage.Add(CustomMessage('InfoUninsOption2'));
		DExplorePage.Values[0] := true;
		i_pageId := DExplorePage.ID;
	end else begin
    end;
end;

//Führt deistallation des bereits installierten Vorgänger Programms aus oder schließt das Setup
//bzw. wenn Option Treiber auf "yes" steht bietet es nach der Installation an diesen zu installieren
function NextButtonClick(CurPageID: integer): boolean;
var
 ResultCode : integer;
begin
Result := true;
	if(CurPageID = i_pageId) then
	begin
		if DExplorePage.SelectedValueIndex = 1 then
		begin
			Wizardform.close();
			Result := false;
		end	else begin
			Exec(ExpandConstant(s_unistallPath + 'unins000.exe'), '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
			Wizardform.close();
			Result := false;
		end;

	end;
end;
